{"version":3,"sources":["Main.js","Room.js","App.js","serviceWorker.js","index.js"],"names":["Main","useState","open","setOpen","inputValue","setInputeValue","className","Button","variant","color","onClick","to","Modal","onClose","Input","value","onChange","e","target","id","Room","class","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oUAyCeA,G,MAlCF,WAAO,IAAD,EACOC,oBAAS,GADhB,mBACVC,EADU,KACJC,EADI,OAEoBF,mBAAS,IAF7B,mBAEVG,EAFU,KAEEC,EAFF,KAIjB,OACE,yBAAKC,UAAU,aACb,6BACE,4CAEF,yBAAKA,UAAU,kBACb,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAMP,GAAQ,KAAnE,aAGA,kBAAC,IAAD,CAAMQ,GAAG,SACP,kBAACJ,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,WAAlC,iBAKJ,kBAACG,EAAA,EAAD,CAAOV,KAAMA,EAAMW,QAAS,kBAAMV,GAAQ,KACxC,yBAAKG,UAAU,gBAAf,WAEE,kBAACQ,EAAA,EAAD,CAAOC,MAAOX,EAAYY,SAAU,SAACC,GAAD,OAAOZ,EAAeY,EAAEC,OAAOH,UACnE,kBAAC,IAAD,CAAMJ,GAAG,SACP,kBAACJ,EAAA,EAAD,CAAQY,GAAG,qBAAqBX,QAAQ,YAAYC,MAAM,WAA1D,cCaGW,G,MAvCF,WACT,OACI,6BACI,6BACI,kBAAC,IAAD,CAAMT,GAAG,KACT,qDAGJ,6BACA,+CACI,yBAAKU,MAAM,gBACP,4BAAQA,MAAM,SAAd,OACA,4BAAQA,MAAM,SAAd,OACA,4BAAQA,MAAM,SAAd,OACA,4BAAQA,MAAM,SAAd,OACA,4BAAQA,MAAM,SAAd,OACA,4BAAQA,MAAM,SAAd,QAEJ,yBAAKA,MAAM,gBACP,4BAAQA,MAAM,SAAd,QACA,4BAAQA,MAAM,SAAd,QACA,4BAAQA,MAAM,SAAd,QACA,4BAAQA,MAAM,SAAd,QACA,4BAAQA,MAAM,SAAd,QACA,4BAAQA,MAAM,SAAd,YAGR,6BACI,kBAACd,EAAA,EAAD,CAAQD,UAAU,WAAWE,QAAQ,YAAYC,MAAM,WAAvD,gBAGA,kBAACF,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,WAAlC,oB,MCTDa,MAjBf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,IAAD,CAAYiB,SAAS,KACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,WCPQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.be921534.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal'; \r\nimport { Input } from '@material-ui/core';\r\nimport './Main.css';\r\n\r\nconst Main = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const [inputValue, setInputeValue] = useState('');\r\n\r\n  return (\r\n    <div className=\"main-page\">\r\n      <div>\r\n        <h1>Scrum Poker</h1>\r\n      </div>\r\n      <div className=\"button-wrapper\">\r\n        <Button variant=\"contained\" color=\"primary\" onClick={() => setOpen(true)}>\r\n          Join Room\r\n        </Button>\r\n        <Link to=\"/room\">\r\n          <Button variant=\"contained\" color=\"primary\">\r\n            Create Room\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n      <Modal open={open} onClose={() => setOpen(false)}>\r\n        <div className=\"create-modal\"> \r\n          Room ID: \r\n          <Input value={inputValue} onChange={(e) => setInputeValue(e.target.value)} />\r\n          <Link to=\"/room\"> \r\n            <Button id=\"create-room-button\" variant=\"contained\" color=\"primary\">  \r\n              Join\r\n            </Button>\r\n          </Link>\r\n        </div>        \r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button'; \r\nimport \"./Room.css\";\r\n\r\nconst Room = () => {\r\n    return (\r\n        <div> \r\n            <div>\r\n                <Link to=\"/\"> \r\n                <h2>  Scrum Poker Room </h2>\r\n                </Link>\r\n            </div>\r\n            <div>\r\n            <h3> Select a card </h3>\r\n                <div class=\"cards-button\"> \r\n                    <button class=\"cards\"> 0 </button>\r\n                    <button class=\"cards\"> 1 </button>\r\n                    <button class=\"cards\"> 2 </button>\r\n                    <button class=\"cards\"> 3 </button>\r\n                    <button class=\"cards\"> 5 </button>\r\n                    <button class=\"cards\"> 8 </button>\r\n                </div> \r\n                <div class=\"cards-button\">\r\n                    <button class=\"cards\"> 13 </button>\r\n                    <button class=\"cards\"> 21 </button>\r\n                    <button class=\"cards\"> 34 </button>\r\n                    <button class=\"cards\"> 55 </button>\r\n                    <button class=\"cards\"> 89 </button>\r\n                    <button class=\"cards\"> Skip </button>\r\n                </div>\r\n            </div>\r\n            <div> \r\n                <Button className=\"show-btn\" variant=\"contained\" color=\"primary\">\r\n                    Show Results \r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\">\r\n                    Hide Results \r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Room;","import React from 'react';\r\nimport {\r\n  HashRouter,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\nimport Main from './Main';\r\nimport Room from './Room';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter basename=\"/\">\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Main />\r\n          </Route>\r\n          <Route path=\"/room\">\r\n            <Room />\r\n          </Route>\r\n        </Switch>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}