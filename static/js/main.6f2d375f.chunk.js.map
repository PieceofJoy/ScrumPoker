{"version":3,"sources":["socket.js","Main.js","Room.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","connect","createRoom","name","emit","vote","score","showScore","hideScore","Main","useState","joinOpen","setJoinOpen","createOpen","setCreateOpen","roomId","setRoomId","userName","setUserName","className","Button","variant","color","onClick","Modal","open","onClose","Input","value","onChange","e","target","to","id","Room","users","isScoreShown","Object","keys","map","key","index","App","state","setState","history","useHistory","useEffect","on","push","initSocket","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f2d375f.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\n\r\nexport const socket = io.connect('http://localhost:80/');\r\n\r\nexport const createRoom = name => {\r\n  socket.emit('create', name);\r\n};\r\n\r\nexport const joinRoom = name => {\r\n  socket.emit('join', name);\r\n};\r\n\r\nexport const vote = (score) => {\r\n  socket.emit('vote', score );\r\n};\r\n\r\nexport const showScore = () => {\r\n  socket.emit('showScore');\r\n};\r\n\r\nexport const hideScore = () => {\r\n  socket.emit('hideScore');\r\n};\r\n\r\nexport const initSocket = (setState, history) => {\r\n  socket.on('created', roomId => {\r\n    history.push(`/room/${roomId}`);\r\n  });\r\n\r\n  socket.on('update', users => {\r\n    setState(state => ({\r\n      ...state,\r\n      users\r\n    }));\r\n  });\r\n\r\n  socket.on('onShowScore', () => {\r\n    setState(state => ({\r\n      ...state,\r\n      isScoreShown: true,\r\n    }));\r\n  });\r\n\r\n  socket.on('onHideScore', () => {\r\n    setState(state => ({\r\n      ...state,\r\n      isScoreShown: false,\r\n    }));\r\n  });\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { Input } from '@material-ui/core';\r\nimport { createRoom } from './socket';\r\nimport './Main.css';\r\n\r\nconst Main = () => {\r\n  const [joinOpen, setJoinOpen] = useState(false);\r\n  const [createOpen, setCreateOpen] = useState(false);\r\n  const [roomId, setRoomId] = useState('');\r\n  const [userName, setUserName] = useState('');\r\n\r\n  return (\r\n    <div className=\"main-page\">\r\n      <div>\r\n        <h1>Scrum Poker</h1>\r\n      </div>\r\n      <div className=\"button-wrapper\">\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => setJoinOpen(true)}\r\n        >\r\n          Join Room\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => setCreateOpen(true)}\r\n        >\r\n          Create Room\r\n        </Button>\r\n      </div>\r\n      <Modal open={joinOpen} onClose={() => setJoinOpen(false)}>\r\n        <div className=\"create-modal\">\r\n          <div>\r\n            Room ID:\r\n            <Input value={roomId} onChange={e => setRoomId(e.target.value)} />\r\n          </div>\r\n          <div>\r\n            User Name:\r\n            <Input value={userName} onChange={e => setUserName(e.target.value)} />\r\n          </div>\r\n          <Link to=\"/room\">\r\n            <Button id=\"create-room-button\" variant=\"contained\" color=\"primary\" onClick={() => createRoom(userName)}>\r\n              Join\r\n            </Button>\r\n          </Link>\r\n        </div>\r\n      </Modal>\r\n      <Modal open={createOpen} onClose={() => setCreateOpen(false)}>\r\n        <div className=\"create-modal\">\r\n          User Name:\r\n          <Input value={userName} onChange={e => setUserName(e.target.value)} />\r\n          <Button\r\n            id=\"create-room-button\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => createRoom(userName)}\r\n          >\r\n            Create\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport { vote } from './socket';\r\nimport { showScore, hideScore } from './socket';\r\nimport './Room.css';\r\n\r\nconst Room = ({ users, isScoreShown }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Link to=\"/\">\r\n          <h2> Scrum Poker Room </h2>\r\n        </Link>\r\n      </div>\r\n      <div>\r\n        <span className=\"user-display\">\r\n          <div className=\"user-header\"> Users </div>\r\n          <div className=\"user-list\">\r\n            {Object.keys(users).map((key, index) => (\r\n              <div key={users.name + index}>\r\n                {users[key].name} {isScoreShown ? users[key].score : ''}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </span>\r\n        <span className=\"cards-wrapper\">\r\n          <h3> Select a card </h3>\r\n          <div className=\"cards-button\">\r\n            <button className=\"cards\" onClick={() => vote(0)}> 0 </button>\r\n            <button className=\"cards\" onClick={() => vote(1)}> 1 </button>\r\n            <button className=\"cards\" onClick={() => vote(2)}> 2 </button>\r\n            <button className=\"cards\" onClick={() => vote(3)}> 3 </button>\r\n            <button className=\"cards\" onClick={() => vote(5)}> 5 </button>\r\n            <button className=\"cards\" onClick={() => vote(8)}> 8 </button>\r\n          </div>\r\n          <div className=\"cards-button\">\r\n            <button className=\"cards\" onClick={() => vote(13)}> 13 </button>\r\n            <button className=\"cards\" onClick={() => vote(21)}> 21 </button>\r\n            <button className=\"cards\" onClick={() => vote(34)}> 34 </button>\r\n            <button className=\"cards\" onClick={() => vote(55)}> 55 </button>\r\n            <button className=\"cards\" onClick={() => vote(89)}> 89 </button>\r\n            <button className=\"cards\" onClick={() => vote(null)}> Skip </button>\r\n          </div>\r\n        </span>\r\n      </div>\r\n      <div>\r\n        <Button \r\n          className=\"show-btn\" \r\n          variant=\"contained\" \r\n          color=\"primary\" \r\n          onClick={showScore}\r\n        >\r\n          Show Results\r\n        </Button>\r\n        <Button className=\"hide-btn\" \r\n          variant=\"contained\" \r\n          color=\"primary\" \r\n          onClick={hideScore}\r\n        >\r\n          Hide Results\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Room;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Switch, Route, useHistory } from 'react-router-dom';\r\nimport { initSocket } from './socket';\r\nimport Main from './Main';\r\nimport Room from './Room';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [state, setState] = useState({\r\n    users: {},\r\n    isScoreShown: false,\r\n  });\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    initSocket(setState, history);\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Main />\r\n        </Route>\r\n        <Route path=\"/room/:roomId\">\r\n          <Room users={state.users} isScoreShown={state.isScoreShown} />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport './socket';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <HashRouter basename=\"/\">\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}